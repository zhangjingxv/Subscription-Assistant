# AttentionSync Smart Makefile - Linus style: intelligent automation
# "Automation should make smart decisions, not just follow scripts"

.PHONY: help install check start status benchmark optimize
.PHONY: install-ai install-ml install-media install-dev install-data
.PHONY: zero-config smart-start auto-install custom-install

# Default target with intelligent help
help: ## Show intelligent help based on current state
	@echo "🧠 AttentionSync Smart Build System"
	@echo "===================================="
	@echo ""
	@python3 scripts/smart_install.py --check
	@echo ""
	@echo "Quick Commands:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2}'

# =============================================================================
# ZERO-CONFIGURATION COMMANDS - Just work!
# =============================================================================

zero-config: ## Zero-configuration startup (detects everything automatically)
	@echo "🔮 Starting with zero configuration..."
	@python3 scripts/zero_config_start.py

smart-start: ## Smart startup with feature detection
	@echo "🧠 Starting with smart feature detection..."
	@python3 scripts/zero_config_start.py --app auto

quick: ## Quickest possible start (minimal features)
	@echo "⚡ Quick start with minimal features..."
	@python3 scripts/zero_config_start.py --app minimal --skip-install

# =============================================================================
# INTELLIGENT INSTALLATION
# =============================================================================

auto-install: ## Auto-install recommended features based on environment
	@echo "🤖 Auto-installing recommended features..."
	@python3 scripts/smart_install.py --auto --force

custom-install: ## Interactive custom installation
	@echo "🎛️  Interactive feature selection..."
	@python3 scripts/smart_install.py

install-all: ## Install all available features
	@echo "📦 Installing all features..."
	@python3 scripts/smart_install.py --all --force

# Feature-specific installations
install-ai: ## Install AI services (Claude, GPT)
	@echo "🤖 Installing AI services..."
	@python3 scripts/smart_install.py --groups ai --force

install-ml: ## Install ML processing (embeddings, clustering)  
	@echo "🧠 Installing ML processing..."
	@python3 scripts/smart_install.py --groups ml --force

install-media: ## Install media processing (images, documents)
	@echo "📷 Installing media processing..."
	@python3 scripts/smart_install.py --groups media --force

install-dev: ## Install development tools
	@echo "🛠️  Installing development tools..."
	@python3 scripts/smart_install.py --groups dev --force

install-data: ## Install data analysis tools
	@echo "📊 Installing data analysis..."
	@python3 scripts/smart_install.py --groups data --force

# =============================================================================
# STATUS AND MONITORING
# =============================================================================

status: ## Show current system status
	@echo "📊 AttentionSync System Status"
	@echo "=============================="
	@python3 scripts/smart_install.py --check
	@echo ""
	@echo "🌐 Service Status:"
	@curl -s http://127.0.0.1:8000/health 2>/dev/null && echo "✅ API Service Running" || echo "❌ API Service Not Running"
	@echo ""
	@echo "🎯 Feature Status:"
	@curl -s http://127.0.0.1:8000/api/v1/features/status 2>/dev/null | python3 -c "import sys, json; data=json.load(sys.stdin); print('✅ Enhanced features available' if any(data.get('feature_flags', {}).values()) else '⚪ Basic features only')" 2>/dev/null || echo "❓ Feature status unknown"

check: ## Comprehensive system check
	@echo "🔍 Comprehensive System Check"
	@echo "============================="
	@python3 -c "import sys; print(f'Python: {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}')"
	@python3 scripts/smart_install.py --check
	@echo ""
	@echo "🔒 Security Check:"
	@python3 -c "import os; print('✅ Environment configured' if os.path.exists('.env') else '❌ No .env file')"
	@echo ""
	@echo "🌐 Network Check:"
	@curl -s http://127.0.0.1:8000/health >/dev/null 2>&1 && echo "✅ API accessible" || echo "❌ API not accessible"

benchmark: ## Performance benchmark
	@echo "⚡ Performance Benchmark"
	@echo "======================="
	@echo "🔄 Testing API performance..."
	@time for i in {1..50}; do curl -s http://127.0.0.1:8000/health >/dev/null; done
	@echo ""
	@echo "🧠 Testing feature performance..."
	@curl -s http://127.0.0.1:8000/api/v1/features/benchmark 2>/dev/null | python3 -m json.tool || echo "❌ Enhanced API not available"

# =============================================================================
# OPTIMIZATION AND MAINTENANCE
# =============================================================================

optimize: ## Optimize installation and performance
	@echo "🚀 Optimizing AttentionSync..."
	@echo "1. Cleaning Python cache..."
	@find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	@echo "2. Optimizing pip cache..."
	@pip cache purge 2>/dev/null || true
	@echo "3. Checking for updates..."
	@python3 -m pip list --outdated --format=columns | head -20
	@echo "✅ Optimization complete"

clean: ## Clean all caches and temporary files
	@echo "🧹 Cleaning up..."
	@find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	@find . -type f -name "*.pyc" -delete 2>/dev/null || true
	@find . -type d -name ".pytest_cache" -exec rm -rf {} + 2>/dev/null || true
	@rm -f *.log security_report.json bandit_report*.json safety_report.json 2>/dev/null || true
	@echo "✅ Cleanup complete"

update: ## Update all dependencies to latest secure versions
	@echo "📦 Updating dependencies..."
	@python3 -m pip install --upgrade --break-system-packages --user -r api/requirements-minimal.txt
	@echo "✅ Dependencies updated"

# =============================================================================
# DEVELOPMENT WORKFLOWS
# =============================================================================

dev: zero-config ## Complete development setup (zero-config + auto-install)
	@echo "🎯 Development environment ready!"
	@echo "🌐 API: http://127.0.0.1:8000"
	@echo "📚 Docs: http://127.0.0.1:8000/docs"
	@echo "🎛️  Features: http://127.0.0.1:8000/api/v1/features/status"

prod: ## Production setup with security hardening
	@echo "🏭 Production setup..."
	@ENVIRONMENT=production python3 scripts/zero_config_start.py --app enhanced --skip-install

demo: ## Demo setup with all features
	@echo "🎪 Demo setup with all features..."
	@python3 scripts/smart_install.py --all --force
	@python3 scripts/zero_config_start.py --app enhanced

# =============================================================================
# FEATURE MANAGEMENT
# =============================================================================

features-reload: ## Reload feature detection (after installing new packages)
	@echo "🔄 Reloading features..."
	@curl -X POST http://127.0.0.1:8000/api/v1/features/reload || echo "❌ API not running"

features-install-ai: ## Install AI features via API
	@echo "🤖 Installing AI features via API..."
	@curl -X POST http://127.0.0.1:8000/api/v1/features/install/AI%20Services || echo "❌ API not running"

features-install-ml: ## Install ML features via API
	@echo "🧠 Installing ML features via API..."
	@curl -X POST http://127.0.0.1:8000/api/v1/features/install/Machine%20Learning || echo "❌ API not running"

# =============================================================================
# TESTING AND VALIDATION
# =============================================================================

test-basic: ## Test basic functionality
	@echo "🧪 Testing basic functionality..."
	@curl -s http://127.0.0.1:8000/health | python3 -c "import sys, json; data=json.load(sys.stdin); print('✅ Basic health OK' if data.get('status')=='healthy' else '❌ Health check failed')"

test-enhanced: ## Test enhanced features
	@echo "🧪 Testing enhanced features..."
	@curl -X POST -H "Content-Type: application/json" -d '{"text":"测试文本"}' http://127.0.0.1:8000/api/v1/process/smart | python3 -c "import sys, json; data=json.load(sys.stdin); print(f'✅ Processed with {len(data.get(\"features_used\", []))} features')" 2>/dev/null || echo "❌ Enhanced features not available"

test-all: test-basic test-enhanced ## Run all tests

# =============================================================================
# INFORMATION COMMANDS
# =============================================================================

info: ## Show system information
	@echo "ℹ️  AttentionSync System Information"
	@echo "==================================="
	@echo "Environment: $(shell python3 -c 'import os; print(os.getenv("ENVIRONMENT", "development"))')"
	@echo "Python: $(shell python3 --version)"
	@echo "Platform: $(shell uname -s -r)"
	@echo "Working Dir: $(shell pwd)"
	@echo "API Status: $(shell curl -s http://127.0.0.1:8000/health >/dev/null 2>&1 && echo 'Running' || echo 'Stopped')"

docs: ## Open API documentation
	@echo "📚 Opening API documentation..."
	@python3 -c "import webbrowser; webbrowser.open('http://127.0.0.1:8000/docs')" 2>/dev/null || echo "🌐 Visit http://127.0.0.1:8000/docs"

# =============================================================================
# SHORTCUTS - Most commonly used commands
# =============================================================================

go: zero-config ## Ultimate shortcut - just make it work!
	@echo "🎯 AttentionSync is ready to go!"