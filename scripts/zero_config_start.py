#!/usr/bin/env python3
"""
Zero-configuration startup - Linus style: intelligent defaults, minimal user input
"The best configuration is no configuration needed."
"""

import os
import sys
import time
import subprocess
from pathlib import Path
import argparse

def detect_environment():
    """Detect environment automatically"""
    # Check for common development indicators
    dev_indicators = [
        Path(".git").exists(),
        os.getenv("ENVIRONMENT") == "development",
        os.getenv("DEBUG") == "true",
        Path("requirements-dev.txt").exists()
    ]
    
    if any(dev_indicators):
        return "development"
    
    # Check for production indicators
    prod_indicators = [
        os.getenv("ENVIRONMENT") == "production",
        os.getenv("DEBUG") == "false", 
        not Path(".git").exists(),
        os.path.exists("/etc/systemd")  # Likely production server
    ]
    
    if any(prod_indicators):
        return "production"
    
    return "development"  # Default to development


def auto_configure_environment():
    """Auto-configure environment if .env doesn't exist"""
    env_file = Path(".env")
    
    if env_file.exists():
        print("✅ .env file found")
        return True
    
    print("🔧 Creating minimal .env configuration...")
    
    # Generate secure defaults
    import secrets
    
    env_content = f"""# AttentionSync Auto-Generated Configuration
# Generated by zero_config_start.py at {time.strftime('%Y-%m-%d %H:%M:%S')}

# Environment
ENVIRONMENT=development
DEBUG=true
LOG_LEVEL=INFO

# Security (auto-generated secure keys)
JWT_SIGNING_KEY={secrets.token_urlsafe(64)}
API_AUTH_KEY={secrets.token_urlsafe(32)}
DB_ENCRYPTION_KEY={secrets.token_urlsafe(64)}
INTER_SERVICE_KEY={secrets.token_urlsafe(32)}

# Legacy compatibility
SECRET_KEY={secrets.token_urlsafe(32)}
JWT_SECRET={secrets.token_urlsafe(64)}

# Database (SQLite for development - zero config)
DATABASE_URL=sqlite:///./attentionsync.db

# Redis (optional - will use in-memory fallback if not available)
REDIS_URL=redis://localhost:6379/0

# MinIO (optional - will use local filesystem if not available)
MINIO_ENDPOINT=localhost:9000
MINIO_ROOT_USER=minioadmin
MINIO_ROOT_PASSWORD=minioadmin

# AI Services (add your keys here)
# ANTHROPIC_API_KEY=your_claude_api_key_here
# OPENAI_API_KEY=your_openai_api_key_here

# Auto-install optional dependencies in development
ATTENTIONSYNC_AUTO_INSTALL=true
"""
    
    with open(env_file, 'w') as f:
        f.write(env_content)
    
    print("✅ .env file created with secure defaults")
    print("💡 Edit .env to add your AI API keys for enhanced features")
    return True


def check_minimal_dependencies():
    """Check if minimal dependencies are available"""
    minimal_deps = ["fastapi", "uvicorn", "aiohttp", "structlog"]
    
    missing = []
    for dep in minimal_deps:
        try:
            __import__(dep)
        except ImportError:
            missing.append(dep)
    
    if missing:
        print(f"📦 Installing minimal dependencies: {', '.join(missing)}")
        
        try:
            subprocess.run([
                sys.executable, "-m", "pip", "install", 
                "--break-system-packages", "--user",
                "-r", "api/requirements-minimal.txt"
            ], check=True, timeout=300)
            
            print("✅ Minimal dependencies installed")
            return True
            
        except subprocess.CalledProcessError as e:
            print(f"❌ Failed to install dependencies: {e}")
            return False
        except subprocess.TimeoutExpired:
            print("⏰ Installation timed out")
            return False
    
    print("✅ Minimal dependencies available")
    return True


def smart_port_selection(preferred_port: int = 8000) -> int:
    """Smart port selection - find available port"""
    import socket
    
    # Try preferred port first
    for port in range(preferred_port, preferred_port + 10):
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.bind(('127.0.0.1', port))
                print(f"🌐 Using port {port}")
                return port
        except OSError:
            continue
    
    print("⚠️  No ports available in range 8000-8009, using 8000 anyway")
    return preferred_port


def start_application(host: str, port: int, app_type: str = "enhanced"):
    """Start the application with intelligent selection"""
    
    # Choose app based on available features and environment
    if app_type == "auto":
        # Auto-select based on environment and available features
        environment = detect_environment()
        
        try:
            # Try to import enhanced features
            from app.core.smart_deps import get_dependency_manager
            manager = get_dependency_manager()
            manager.scan_environment()
            
            available_features = sum(manager.create_feature_flags().values())
            
            if available_features > 2:
                app_type = "enhanced"
                print(f"🎯 Auto-selected enhanced mode ({available_features} features available)")
            else:
                app_type = "minimal"
                print(f"🎯 Auto-selected minimal mode (limited features)")
        
        except ImportError:
            app_type = "minimal"
            print("🎯 Auto-selected minimal mode (enhanced features not available)")
    
    # Start appropriate application
    if app_type == "enhanced":
        app_module = "app.main_enhanced:app"
        print("🚀 Starting AttentionSync Enhanced API...")
    else:
        app_module = "app.main_minimal:app"
        print("🚀 Starting AttentionSync Minimal API...")
    
    try:
        import uvicorn
        
        # Ensure we're in the right directory
        current_dir = Path.cwd()
        if current_dir.name != "api":
            api_dir = current_dir / "api"
            if api_dir.exists():
                os.chdir(api_dir)
                print(f"📁 Changed to API directory: {api_dir}")
            else:
                print(f"❌ API directory not found: {api_dir}")
                return False
        
        # Add current directory to Python path
        if str(Path.cwd()) not in sys.path:
            sys.path.insert(0, str(Path.cwd()))
        
        uvicorn.run(
            app_module,
            host=host,
            port=port,
            reload=False,  # Disable reload for stability
            log_level="info"
        )
        
    except KeyboardInterrupt:
        print("\n👋 Graceful shutdown")
        return True
    except Exception as e:
        print(f"\n💥 Startup failed: {e}")
        return False


def main():
    """Main zero-config startup"""
    parser = argparse.ArgumentParser(description="Zero-configuration AttentionSync startup")
    parser.add_argument("--host", default="auto", help="Host to bind (auto-detects)")
    parser.add_argument("--port", type=int, default=8000, help="Port to bind")
    parser.add_argument("--app", choices=["minimal", "enhanced", "auto"], default="auto", help="App type")
    parser.add_argument("--skip-install", action="store_true", help="Skip dependency installation")
    parser.add_argument("--skip-config", action="store_true", help="Skip auto-configuration")
    
    args = parser.parse_args()
    
    print("🔮 AttentionSync Zero-Config Startup")
    print("=" * 40)
    
    # Auto-configure environment
    if not args.skip_config:
        if not auto_configure_environment():
            print("❌ Environment configuration failed")
            return False
    
    # Check and install minimal dependencies
    if not args.skip_install:
        if not check_minimal_dependencies():
            print("❌ Dependency check failed")
            return False
    
    # Auto-detect host
    if args.host == "auto":
        environment = detect_environment()
        host = "127.0.0.1" if environment == "development" else "0.0.0.0"
        print(f"🌐 Auto-detected host: {host} (environment: {environment})")
    else:
        host = args.host
    
    # Smart port selection
    port = smart_port_selection(args.port)
    
    print(f"\n🎯 Configuration summary:")
    print(f"  Host: {host}")
    print(f"  Port: {port}")
    print(f"  App type: {args.app}")
    print(f"  Environment: {detect_environment()}")
    
    # Start application
    return start_application(host, port, args.app)


if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n👋 Startup cancelled")
        sys.exit(1)
    except Exception as e:
        print(f"\n💥 Startup failed: {e}")
        sys.exit(1)