# AttentionSync Nginx 配置
# 高性能负载均衡和反向代理配置

# 工作进程数（通常设置为 CPU 核心数）
worker_processes auto;

# 错误日志
error_log /var/log/nginx/error.log warn;

# PID 文件
pid /var/run/nginx.pid;

# 事件配置
events {
    # 每个工作进程的最大连接数
    worker_connections 1024;
    
    # 使用 epoll 事件模型（Linux）
    use epoll;
    
    # 接受多个连接
    multi_accept on;
}

# HTTP 配置
http {
    # 基础设置
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # 日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    # 访问日志
    access_log /var/log/nginx/access.log main;
    
    # 性能优化
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 100;
    types_hash_max_size 2048;
    server_tokens off;
    
    # 客户端配置
    client_max_body_size 50M;
    client_body_timeout 60s;
    client_header_timeout 60s;
    send_timeout 60s;
    
    # Gzip 压缩
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Brotli 压缩（如果支持）
    # brotli on;
    # brotli_comp_level 6;
    # brotli_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    
    # 缓存配置
    open_file_cache max=1000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;
    
    # 限流配置
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;
    limit_conn_zone $binary_remote_addr zone=conn:10m;
    
    # 上游服务器配置
    upstream api_backend {
        # 负载均衡策略：least_conn（最少连接）
        least_conn;
        
        # API 服务器列表
        server api1:8000 max_fails=3 fail_timeout=30s weight=1;
        server api2:8000 max_fails=3 fail_timeout=30s weight=1;
        server api3:8000 max_fails=3 fail_timeout=30s weight=1;
        
        # 备用服务器
        server api_backup:8000 backup;
        
        # 健康检查（需要 nginx-plus 或第三方模块）
        # health_check;
        
        # 长连接
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }
    
    upstream web_backend {
        # Web 服务器列表
        server web1:3000 max_fails=3 fail_timeout=30s;
        server web2:3000 max_fails=3 fail_timeout=30s;
        
        keepalive 16;
    }
    
    # 缓存配置
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=api_cache:10m max_size=1g inactive=60m use_temp_path=off;
    proxy_cache_path /var/cache/nginx/static levels=1:2 keys_zone=static_cache:10m max_size=2g inactive=1d use_temp_path=off;
    
    # 主服务器配置
    server {
        listen 80;
        server_name attentionsync.io www.attentionsync.io;
        
        # 重定向到 HTTPS
        return 301 https://$server_name$request_uri;
    }
    
    # HTTPS 服务器配置
    server {
        listen 443 ssl http2;
        server_name attentionsync.io www.attentionsync.io;
        
        # SSL 配置
        ssl_certificate /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;
        
        # SSL 优化
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_stapling on;
        ssl_stapling_verify on;
        
        # 安全头
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' wss:; frame-ancestors 'none';" always;
        
        # 限制连接数
        limit_conn conn 20;
        
        # 静态文件缓存
        location ~* \.(jpg|jpeg|png|gif|ico|css|js|woff|woff2|ttf|eot|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Cache-Status "STATIC";
            
            # 压缩
            gzip_static on;
            
            # 缓存
            proxy_cache static_cache;
            proxy_cache_valid 200 1d;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            
            # 代理到 Web 服务
            proxy_pass http://web_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # API 路由
        location /api/ {
            # 限流
            limit_req zone=api burst=20 nodelay;
            
            # 健康检查
            location /api/health {
                access_log off;
                proxy_pass http://api_backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                
                # 快速超时
                proxy_connect_timeout 5s;
                proxy_send_timeout 5s;
                proxy_read_timeout 5s;
            }
            
            # 认证接口特殊限流
            location /api/v1/auth/ {
                limit_req zone=auth burst=10 nodelay;
                
                proxy_pass http://api_backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                
                # 超时设置
                proxy_connect_timeout 10s;
                proxy_send_timeout 30s;
                proxy_read_timeout 30s;
                
                # 不缓存认证请求
                proxy_no_cache 1;
                proxy_cache_bypass 1;
            }
            
            # 其他 API 请求
            proxy_pass http://api_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 超时设置
            proxy_connect_timeout 10s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # 缓存配置
            proxy_cache api_cache;
            proxy_cache_valid 200 5m;
            proxy_cache_valid 404 1m;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_background_update on;
            proxy_cache_lock on;
            
            # 缓存键
            proxy_cache_key "$scheme$request_method$host$request_uri$http_authorization";
            
            # 跳过缓存的条件
            proxy_cache_bypass $http_cache_control;
            proxy_no_cache $http_cache_control;
            
            # 添加缓存状态头
            add_header X-Cache-Status $upstream_cache_status;
            
            # 长连接
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }
        
        # WebSocket 支持
        location /ws/ {
            proxy_pass http://api_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket 特殊配置
            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;
            proxy_connect_timeout 10s;
        }
        
        # 管理接口（限制 IP 访问）
        location /admin/ {
            # IP 白名单
            allow 10.0.0.0/8;
            allow 192.168.0.0/16;
            allow 172.16.0.0/12;
            deny all;
            
            proxy_pass http://api_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # 前端应用
        location / {
            # 尝试静态文件，否则代理到 Next.js
            try_files $uri $uri/ @nextjs;
        }
        
        location @nextjs {
            proxy_pass http://web_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Next.js 特殊配置
            proxy_buffering off;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            # 超时设置
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }
        
        # 错误页面
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            root /usr/share/nginx/html;
        }
        
        # 机器人文件
        location = /robots.txt {
            alias /usr/share/nginx/html/robots.txt;
            access_log off;
        }
        
        location = /favicon.ico {
            alias /usr/share/nginx/html/favicon.ico;
            access_log off;
        }
    }
    
    # 监控和状态页面
    server {
        listen 8080;
        server_name localhost;
        
        # 只允许内部访问
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 192.168.0.0/16;
        allow 172.16.0.0/12;
        deny all;
        
        # Nginx 状态
        location /nginx_status {
            stub_status on;
            access_log off;
        }
        
        # 健康检查
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # 缓存清理（需要第三方模块）
        location ~ /purge(/.*) {
            # proxy_cache_purge api_cache $scheme$request_method$host$1;
            return 200 "Cache purged\n";
        }
    }
}

# Stream 配置（TCP/UDP 负载均衡）
stream {
    # 数据库连接负载均衡（如果需要）
    upstream postgres_backend {
        server postgres-master:5432 weight=3;
        server postgres-slave1:5432 weight=1;
        server postgres-slave2:5432 weight=1;
    }
    
    # PostgreSQL 代理
    server {
        listen 5432;
        proxy_pass postgres_backend;
        proxy_timeout 1s;
        proxy_responses 1;
        proxy_connect_timeout 1s;
    }
    
    # Redis 集群代理（如果需要）
    upstream redis_backend {
        server redis-master:6379;
    }
    
    server {
        listen 6379;
        proxy_pass redis_backend;
        proxy_timeout 1s;
        proxy_responses 1;
        proxy_connect_timeout 1s;
    }
}