# AttentionSync 可扩展部署配置
# 支持多实例和负载均衡

version: '3.8'

services:
  # PostgreSQL 主从配置
  postgres-master:
    image: postgres:15-alpine
    container_name: attentionsync-postgres-master
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-attentionsync}
      POSTGRES_USER: ${POSTGRES_USER:-attentionsync}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_REPLICATION_USER: ${POSTGRES_REPLICATION_USER:-replicator}
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD:-repl_password}
    volumes:
      - postgres_master_data:/var/lib/postgresql/data
      - ./infra/postgres/master:/docker-entrypoint-initdb.d
      - ./infra/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    ports:
      - "5432:5432"
    networks:
      - attentionsync-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  postgres-slave1:
    image: postgres:15-alpine
    container_name: attentionsync-postgres-slave1
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-attentionsync}
      POSTGRES_USER: ${POSTGRES_USER:-attentionsync}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_MASTER_HOST: postgres-master
      POSTGRES_REPLICATION_USER: ${POSTGRES_REPLICATION_USER:-replicator}
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD:-repl_password}
    volumes:
      - postgres_slave1_data:/var/lib/postgresql/data
      - ./infra/postgres/slave:/docker-entrypoint-initdb.d
    depends_on:
      - postgres-master
    ports:
      - "5433:5432"
    networks:
      - attentionsync-network

  postgres-slave2:
    image: postgres:15-alpine
    container_name: attentionsync-postgres-slave2
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-attentionsync}
      POSTGRES_USER: ${POSTGRES_USER:-attentionsync}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_MASTER_HOST: postgres-master
      POSTGRES_REPLICATION_USER: ${POSTGRES_REPLICATION_USER:-replicator}
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD:-repl_password}
    volumes:
      - postgres_slave2_data:/var/lib/postgresql/data
      - ./infra/postgres/slave:/docker-entrypoint-initdb.d
    depends_on:
      - postgres-master
    ports:
      - "5434:5432"
    networks:
      - attentionsync-network

  # Redis 集群配置
  redis-master:
    image: redis:7-alpine
    container_name: attentionsync-redis-master
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru --save 900 1 --save 300 10
    volumes:
      - redis_master_data:/data
    ports:
      - "6379:6379"
    networks:
      - attentionsync-network

  redis-slave1:
    image: redis:7-alpine
    container_name: attentionsync-redis-slave1
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru --slaveof redis-master 6379
    volumes:
      - redis_slave1_data:/data
    depends_on:
      - redis-master
    ports:
      - "6380:6379"
    networks:
      - attentionsync-network

  redis-slave2:
    image: redis:7-alpine
    container_name: attentionsync-redis-slave2
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru --slaveof redis-master 6379
    volumes:
      - redis_slave2_data:/data
    depends_on:
      - redis-master
    ports:
      - "6381:6379"
    networks:
      - attentionsync-network

  # Redis Sentinel（哨兵模式）
  redis-sentinel1:
    image: redis:7-alpine
    container_name: attentionsync-redis-sentinel1
    command: redis-sentinel /etc/redis/sentinel.conf
    volumes:
      - ./infra/redis/sentinel.conf:/etc/redis/sentinel.conf
    depends_on:
      - redis-master
    ports:
      - "26379:26379"
    networks:
      - attentionsync-network

  redis-sentinel2:
    image: redis:7-alpine
    container_name: attentionsync-redis-sentinel2
    command: redis-sentinel /etc/redis/sentinel.conf
    volumes:
      - ./infra/redis/sentinel.conf:/etc/redis/sentinel.conf
    depends_on:
      - redis-master
    ports:
      - "26380:26379"
    networks:
      - attentionsync-network

  redis-sentinel3:
    image: redis:7-alpine
    container_name: attentionsync-redis-sentinel3
    command: redis-sentinel /etc/redis/sentinel.conf
    volumes:
      - ./infra/redis/sentinel.conf:/etc/redis/sentinel.conf
    depends_on:
      - redis-master
    ports:
      - "26381:26379"
    networks:
      - attentionsync-network

  # API 服务多实例
  api1:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: attentionsync-api1
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-attentionsync}:${POSTGRES_PASSWORD:-changeme}@postgres-master:5432/${POSTGRES_DB:-attentionsync}
      DATABASE_READ_URL: postgresql://${POSTGRES_USER:-attentionsync}:${POSTGRES_PASSWORD:-changeme}@postgres-slave1:5432/${POSTGRES_DB:-attentionsync}
      REDIS_URL: redis://redis-master:6379/0
      INSTANCE_ID: api1
      WORKER_PROCESSES: 4
    volumes:
      - ./api:/app
      - ./prompts:/app/prompts:ro
    depends_on:
      - postgres-master
      - redis-master
    networks:
      - attentionsync-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  api2:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: attentionsync-api2
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-attentionsync}:${POSTGRES_PASSWORD:-changeme}@postgres-master:5432/${POSTGRES_DB:-attentionsync}
      DATABASE_READ_URL: postgresql://${POSTGRES_USER:-attentionsync}:${POSTGRES_PASSWORD:-changeme}@postgres-slave2:5432/${POSTGRES_DB:-attentionsync}
      REDIS_URL: redis://redis-master:6379/0
      INSTANCE_ID: api2
      WORKER_PROCESSES: 4
    volumes:
      - ./api:/app
      - ./prompts:/app/prompts:ro
    depends_on:
      - postgres-master
      - redis-master
    networks:
      - attentionsync-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  api3:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: attentionsync-api3
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-attentionsync}:${POSTGRES_PASSWORD:-changeme}@postgres-master:5432/${POSTGRES_DB:-attentionsync}
      DATABASE_READ_URL: postgresql://${POSTGRES_USER:-attentionsync}:${POSTGRES_PASSWORD:-changeme}@postgres-slave1:5432/${POSTGRES_DB:-attentionsync}
      REDIS_URL: redis://redis-master:6379/0
      INSTANCE_ID: api3
      WORKER_PROCESSES: 4
    volumes:
      - ./api:/app
      - ./prompts:/app/prompts:ro
    depends_on:
      - postgres-master
      - redis-master
    networks:
      - attentionsync-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Worker 服务多实例
  worker1:
    build:
      context: ./worker
      dockerfile: Dockerfile
    container_name: attentionsync-worker1
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-attentionsync}:${POSTGRES_PASSWORD:-changeme}@postgres-master:5432/${POSTGRES_DB:-attentionsync}
      REDIS_URL: redis://redis-master:6379/0
      WORKER_CONCURRENCY: 8
      WORKER_ID: worker1
    volumes:
      - ./worker:/app
      - ./prompts:/app/prompts:ro
    depends_on:
      - postgres-master
      - redis-master
    networks:
      - attentionsync-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  worker2:
    build:
      context: ./worker
      dockerfile: Dockerfile
    container_name: attentionsync-worker2
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-attentionsync}:${POSTGRES_PASSWORD:-changeme}@postgres-master:5432/${POSTGRES_DB:-attentionsync}
      REDIS_URL: redis://redis-master:6379/0
      WORKER_CONCURRENCY: 8
      WORKER_ID: worker2
    volumes:
      - ./worker:/app
      - ./prompts:/app/prompts:ro
    depends_on:
      - postgres-master
      - redis-master
    networks:
      - attentionsync-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  worker3:
    build:
      context: ./worker
      dockerfile: Dockerfile
    container_name: attentionsync-worker3
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-attentionsync}:${POSTGRES_PASSWORD:-changeme}@postgres-master:5432/${POSTGRES_DB:-attentionsync}
      REDIS_URL: redis://redis-master:6379/0
      WORKER_CONCURRENCY: 6
      WORKER_ID: worker3
      WORKER_QUEUES: low_priority,background
    volumes:
      - ./worker:/app
      - ./prompts:/app/prompts:ro
    depends_on:
      - postgres-master
      - redis-master
    networks:
      - attentionsync-network
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 1.5G
        reservations:
          cpus: '0.75'
          memory: 768M

  # Web 服务多实例
  web1:
    build:
      context: ./web
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
    container_name: attentionsync-web1
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      INSTANCE_ID: web1
    volumes:
      - ./web:/app
      - /app/node_modules
      - /app/.next
    networks:
      - attentionsync-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  web2:
    build:
      context: ./web
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
    container_name: attentionsync-web2
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      INSTANCE_ID: web2
    volumes:
      - ./web:/app
      - /app/node_modules
      - /app/.next
    networks:
      - attentionsync-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Nginx 负载均衡器
  nginx:
    image: nginx:alpine
    container_name: attentionsync-nginx
    volumes:
      - ./infra/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infra/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # 监控端口
    depends_on:
      - api1
      - api2
      - api3
      - web1
      - web2
    networks:
      - attentionsync-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # HAProxy（可选的负载均衡器）
  haproxy:
    image: haproxy:2.8-alpine
    container_name: attentionsync-haproxy
    volumes:
      - ./infra/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    ports:
      - "8081:80"
      - "8082:8080"  # 统计页面
    depends_on:
      - api1
      - api2
      - api3
    networks:
      - attentionsync-network
    profiles:
      - haproxy

  # MinIO 集群
  minio1:
    image: minio/minio:latest
    container_name: attentionsync-minio1
    command: server --console-address ":9001" http://minio{1...4}/data{1...2}
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - minio1_data1:/data1
      - minio1_data2:/data2
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - attentionsync-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio2:
    image: minio/minio:latest
    container_name: attentionsync-minio2
    command: server --console-address ":9001" http://minio{1...4}/data{1...2}
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - minio2_data1:/data1
      - minio2_data2:/data2
    ports:
      - "9002:9000"
      - "9003:9001"
    networks:
      - attentionsync-network

  minio3:
    image: minio/minio:latest
    container_name: attentionsync-minio3
    command: server --console-address ":9001" http://minio{1...4}/data{1...2}
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - minio3_data1:/data1
      - minio3_data2:/data2
    ports:
      - "9004:9000"
      - "9005:9001"
    networks:
      - attentionsync-network

  minio4:
    image: minio/minio:latest
    container_name: attentionsync-minio4
    command: server --console-address ":9001" http://minio{1...4}/data{1...2}
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - minio4_data1:/data1
      - minio4_data2:/data2
    ports:
      - "9006:9000"
      - "9007:9001"
    networks:
      - attentionsync-network

  # Elasticsearch 集群（可选）
  elasticsearch1:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: attentionsync-es1
    environment:
      - node.name=es1
      - cluster.name=attentionsync-cluster
      - discovery.seed_hosts=elasticsearch2,elasticsearch3
      - cluster.initial_master_nodes=es1,es2,es3
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch1_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - attentionsync-network
    profiles:
      - elasticsearch

  elasticsearch2:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: attentionsync-es2
    environment:
      - node.name=es2
      - cluster.name=attentionsync-cluster
      - discovery.seed_hosts=elasticsearch1,elasticsearch3
      - cluster.initial_master_nodes=es1,es2,es3
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch2_data:/usr/share/elasticsearch/data
    ports:
      - "9201:9200"
    networks:
      - attentionsync-network
    profiles:
      - elasticsearch

  elasticsearch3:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: attentionsync-es3
    environment:
      - node.name=es3
      - cluster.name=attentionsync-cluster
      - discovery.seed_hosts=elasticsearch1,elasticsearch2
      - cluster.initial_master_nodes=es1,es2,es3
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch3_data:/usr/share/elasticsearch/data
    ports:
      - "9202:9200"
    networks:
      - attentionsync-network
    profiles:
      - elasticsearch

networks:
  attentionsync-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  # PostgreSQL 数据
  postgres_master_data:
    driver: local
  postgres_slave1_data:
    driver: local
  postgres_slave2_data:
    driver: local
  
  # Redis 数据
  redis_master_data:
    driver: local
  redis_slave1_data:
    driver: local
  redis_slave2_data:
    driver: local
  
  # MinIO 数据
  minio1_data1:
    driver: local
  minio1_data2:
    driver: local
  minio2_data1:
    driver: local
  minio2_data2:
    driver: local
  minio3_data1:
    driver: local
  minio3_data2:
    driver: local
  minio4_data1:
    driver: local
  minio4_data2:
    driver: local
  
  # Elasticsearch 数据
  elasticsearch1_data:
    driver: local
  elasticsearch2_data:
    driver: local
  elasticsearch3_data:
    driver: local
  
  # Nginx 缓存
  nginx_cache:
    driver: local